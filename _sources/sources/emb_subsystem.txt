======================
嵌入式系统裸机开发笔记
======================

LED
===

从tiny6410核心板原理图上可以看出led1-4由GPK4-7控制，并且这些引脚是复用
引脚，点亮led需要对应的引脚为为低电平。

目的是让led根据我们设置的引脚来相应地发生变化，所以它们应该为输出模式，
从tiny6410 datasheet上可以看出GPK4-7分别由GPKCON0的[19:16]、[23:20]、
[27:24]和[31:28]控制，需要将其分别设置为b0001。

GPK4-7的值可以通过向GPKDAT[n]对应的位写入即可。

..
   按键(需修改)
   ============

   按键1按下时GPN0为低电平。
   GPN0由GPNCON0的第0-1位选择，0为输入，1为输出。
   由GPNDAT[0:15]对应的GPK[0-15]读写数据。

   GPNCON0的地址:	0x7F008830
   GPNDAT的地址:	0x7F008834

时钟
====

tiny6410 datasheet中的图3-2为时钟的总体布局图。

6410有很多时钟，比如CPU时钟、总线时钟和各种外设时钟，时钟源也有很多，有
一个主时钟源和其它次要的时钟源。

主时钟源通过转换，生成6410的几个最主要的时钟：CPU时钟、AXI/AHB总线时钟
和APB总线时钟，分别对应于图3-2中的ARMCLK、HCLK和PCLK。

6410有3个PLL来转换生成这三种不同的时钟：APLL(ARM PLL)、MPLL(Main PLL)和
EPLL(extra PLL)，它们的输入时钟都是上面的主时钟源。我们可以将PLL看成一
个黑盒子，它将一个时钟输入转换为另一个时钟输出。

主时钟源可以选择外部晶体(XXTlpll)(通过晶振产生时钟)或者直接选择一个外部
时钟(XEXTCLK)，由OM[0]的值来决定，为0时选择外部晶体，为1时选择外部时钟。

寄存器配置过程：

从tiny6410核心板原理图上可以看出我们使用的是频率为12MHz的晶振(how ???)，
最终配置结果为CPU时钟为533MHz，AXI/AHB总线时钟为...，APB总线时钟为...。

我们在配置时钟时，将需求降到最低，即满足系统运行最基本的要求即可，暂时
不需要使用EPLL，所以相关的寄存器就不需要配置。基本配置可以对照图3-4来确
定。

- 时钟源设置

  CLK_SRC[0]决定CPU时钟直接来自于外部时钟还是来自于APLL的输出。

  CLK_SRC[1]决定总线时钟来自于外部时钟还是来自于MPLL的输出。

  OTHERS[6]决定总线时钟是否来自于CPU时钟。如果OTHERS[6]设置为1，则
  MPLL的相关设置以及CLK_SRC[1]的值便可以忽略。

  OTHERS[7]则决定总线时钟是否和CPU始终保持同步，设置了OTHERS[7]之后可
  以对OTHERS[11:8]进行检测以便确认已经同步，稳定了之后这几位为1；如果
  设置为异步模式，则稳定了之后这几位为0。<这是看u-boot的源代码得出的
  结论，还需确认。 ???>

- 分频器设置

  对照图3-5来设置。

  MISC_CON[19]设置为0，传入DIV(ARM)和DIV(HCLKX2)之前不进行分频。

  DIV(ARM)对应于CLK_DIV0[3:0]，设置为0。 ``Fout(APLL) = ARMCLK``

  DIV(HCLKX2)对应于CLK_DIV0[11:9]，设置为1。 ``ARMCLK = 2 * HCLKX2``

  DIV(HCLK)对应于CLK_DIV0[8]，设置为1。 ``HCLKX2 = 2 * HCLK``

  DIV(PCLK)对应于CLK_DIV0[15:12]，设置为3。 ``HCLKX2 = 4 * PCLK``

  这样配置结果为

  ::

    ARMCLK = 2 * HCLKX2 = 4 * HCLK = 8 * PCLK = 533MHz

- PLL设置

  包括倍率设置和lock time设置。

  寄存器APLL_CON和MPLL_CON的最高位为控制是否启用这个PLL，这两个寄
  存器的[25:16]、[13:8]和[2:0]分别控制相应的PLL的三个值：MDIV、PDIV和
  SDIV，其余的位为0。

  转换倍率换算公式

  ::

    输出时钟频率 = 输入时钟频率 * MDIV / (PDIV * (2 ^ SDIV))


  所以当需求输出频率为533时，MDIV、PDIV和SDIV的值分别为
  266、3和1。

  某个PLL的locktime可以理解为这个PLL从开始工作到输出到预定的稳定
  时钟需要经历的时间，预设值一般为0xFFFF，在这段时间内，这个　PLL　的输
  出时钟为0。寄存器APLL_LOCK/MPLL_LOCK/EPLL_LOCK　的高十六位固定为0，
  低十六位为各自对应的locktime。

..
   下面是在 openocd 的配置文件中配置时钟的例子

   ::

      # 将OTHERS[6]设为1，将总线时钟的"同步模式选择器"置为1，见图3-4中的"SYNCMUX"
      mww 0x7E00F900 0x805e        ;# OTHERS    - Change SYNCMUX[6] to “1”
      sleep 1000
      # 将OTHERS[7]设为1，将总线时钟与CPU时钟设为同步模式
      mww 0x7E00F900 0x80de        ;# OTHERS    - Assert SYNCREQ&VICSYNCEN to “1”(rb1004modify)
      sleep 1000                   ;#           - Others[11:8] to 0xF

      # 设置APLL和MPLL的lock_time，为固定值
      mww 0x7E00F000 0xffff        ;# APLL_LOCK    - APLL LockTime
      mww 0x7E00F004 0xffff        ;# MPLL_LOCK    - MPLL LockTime

      # 设置 CLK_DIV0 (0000_0001_0000_0100_0111_0011_0001_0000)
      # CLK_DIV0[31:28]: MFC_RATIO    = 0000
      # CLK_DIV0[27:24]: JPEG_RATIO   = 0001
      # CLK_DIV0[23:20]: CAM_RATIO    = 0000
      # CLK_DIV0[19:18]: SECUR_RATIO  = 01
      # CLK_DIV0[17:16]: RESERVED     = 00
      # CLK_DIV0[15:12]: PCLK_RATIO   = 0111
      # CLK_DIV0[11:9]:  HCLKX2_RATIO = 001
      # CLK_DIV0[8]:     HCLK_RATIO   = 1
      # CLK_DIV0[7:5]:   RESERVED     = 000
      # CLK_DIV0[4]:     MPLL_RATIO   = 1
      # CLK_DIV0[3:0]:   ARM_RATIO    = 0000
      # 注意上面已将OTHER[6]设置为1，则MPLL_RATIO的值不会影响HCLK和PCLK。
      # 所以最终
      #   ARMCLK = APLL_OUT/(ARM_RATIO+1) = APLL_OUT
      #   HCLK = [APLL_OUT/(HCLKX2_RATIO+1)] / (HCLK_RATIO+1) = APLL_OUT/4
      #   PCLK = [APLL_OUT/(HCLKX2_RATIO+1)] / (PCLK_RATIO+1) = APLL_OUT/16
      mww 0x7E00F020 0x1047310    ;# CLK_DIV0     - ARMCLK:HCLK:PCLK = 1:4:16

      # 设置 APLL_CON (1000_0001_1001_0000_0000_0011_0000_0010)
      # 设置 MPLL_CON (1000_0001_1001_0000_0000_0011_0000_0011)
      #              |E|-----|-----A/M----|-|---P---|-----|-s-|
      mww 0x7E00F00c 0x81900302    ;# APLL_CON     - A:400, P:3, S:2 => 400MHz
      mww 0x7E00F010 0x81900303    ;# MPLL_CON     - M:400, P:3, S:3 => 200MHz

      # 设置 CLK_SRC ， 表明将会使用APLL和MPLL
      # CLK_SRC[1]: MPLL_SEL = 1
      # CLK_SRC[0]: APLL_SEL = 1
      mww 0x7E00F01c 0x3            ;# CLK_SRC         - APLL,MPLL Clock Select

..
   内存
   ====

   CASL    3
   tDQSS   1
   tMRD    2
   tRAS    42ns
   tRC     60ns
   tRCD    18ns
   tRFC    80ns
   tRP     18ns
   tRRD    12ns
   tWR     12ns
   tWTR    <2>
   tXP     <2>
   tXSR    120ns
   tESR    <120ns>

   疑难点

   - P1T_WTR、P1T_XP、P1T_ESR这三个时间参数在内存手册上没有，如何得出？

   - P1MEMCFG2[12:11, 3, 2, 1, 0]分别代表什么含义？

   - P1_chip_0_cfg寄存器中各位的含义?

   - MEM_SYS_CFG寄存器中各位的含义? 似懂非懂

   - MRS和EMRS分别代表什么含义？如何设置他们的bank地址？已解决
