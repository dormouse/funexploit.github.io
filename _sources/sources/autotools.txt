=================
autotools学习笔记
=================

.. contents::

autoconf
========

- 在源文件中使用某些 autoconf 产生的变量，下面的例子中假设想打印当前的
  操作系统名称及架构信息

  1. 在 configure.ac 中加入以下内容

     ::

       AH_TEMPLATE(CPU_VENDOR_OS)
       AC_CANONICAL_HOST
       AC_DEFINE_UNQUOTED(CPU_VENDOR_OS, "$host")

     第一行声明变量 CPU_VENDOR_OS (即定义模板)，注意这个变量的名称可以
     随意自定义，但要与源代码中保持一致。

     第二行进行检测并生成 $host 变量

     第三行对 CPU_VENDOR_OS 进行赋值

  2. 在源文件中先包含 autoconf 产生的头文件 config.h，并使用在
     configure.ac 中定义的变量

     ::

       #include "config.h"

       printf("%s\n", CPU_VENDOR_OS);
     


automake
========

- 指定头文件目录

  需要在 Makefile.am 中指定（顶级的 Makefile.am 中的AM_CFLAGS 的值并不
  能传递到子目录下的 Makefile.am 中）：

  ::

    AM_CFLAGS = -I../include

- 指定额外的库文件

  需要在 Makefile.am 中指定：

  ::

    LDADD = ../lib/libunp.a


- 多个目标可以多行指定，每行指定一部分

  ::

    bin_PROGRAMS = tcpserv01 tcpserv02 tcpserv04 tcpservselect01
    bin_PROGRAMS += tcpcli01 tcpcli04

  注意对一个变量使用 `+=` 之前，必须先使用 `=` 对其赋值，上面的例子可以写成：

  ::

    bin_PROGRAMS =
    bin_PROGRAMS += tcpserv01 tcpserv02 tcpserv04 tcpservselect01
    bin_PROGRAMS += tcpcli01 tcpcli04

- 删除额外的文件，可以使用一些预定义的变量，给它们赋值就可以，包括
  `MOSTLYCLEANFILES` 、 `CLEANFILES` 、 `DISTCLEANFILES` 和
  `MAINTAINERCLEANFILES` 。

  例如想删除当前目录下所有的以 '~' 结尾的文件（即emacs的备份文件），可
  以在 Makefile 里加入：

  ::

    CLEANFILES = *~     

